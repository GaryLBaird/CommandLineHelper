[Default]
default=msi,installshield,installshieldWebPackage,WiseInstallMaster,InnoSetup,NullsoftScriptableInstallSystem,GhostInstaller,MicrosoftHotfixesAndOlderPackages,AutoIt,7zip,Info-Zip,Compress-Archive,Expand-Archive,MicrosoftCab
about=This ini describes the types of installers and how to handle them. This is both a reference and a programmatic definition list that could easily apply as a default that can be called later.
info_lines=2
info_0=The "pre" referrs to the command line options run before the install file. i.e. an msi file requires msiexec 
info_1=The "post" referrs to the command line options to be run after the install file.

[msi]
pre=msiexec /qb /l* name-log.txt /i 
post=
info_lines=2
info_0=For installation, use the /i and /qb switches. Use the /l* switch to produce a log file. 
info_1=In general, you want to provide the /i, /qb, and REBOOT=ReallySuppress parameters to msiexec.

[installshield]
pre=
post=
info_lines=5
info_0=Installers created by InstallShield recognize the /r, /s, /sms, /f1, and /f2 switches. The installer itself is invariably named setup.exe.
info_1=To perform a silent installation, you need an InstallShield "answer file", customarily named setup.iss. Some applications ship with such a file, but if yours does not, you can use the graphical installer itself to create one.\
info_2=for an InstallShield application, you want to provide both the /s and the /sms switches.
info_3=The /f1filename switch allows you to specify a fully-qualified alternate name for the setup.iss file. Note that there must be no space between the /f1 switch and the file name. This switch works both with /r to create the file and with /s to read it.
info_4=The /f2filename switch specifies a log file. Once again, there must be no space between the switch and the file name.


[installshieldWebPackage]
pre=
post=
info_lines=9
info_0=InstallShield has a relatively new add-on product called PackagefortheWeb, or PFTW for short. This is basically an InstallShield tree bundled up as a single-file executable.
info_1=When you run this executable, it extracts a bunch of files to a temporary directory and launches the setup.exe within.
info_2=The PFTW package recognizes the /s and /a ... switches. The /s switch instructs the PFTW package to run silently, although this does not necessarily mean that the underlying setup.exewill run silently.
info_3=The /a ... ("add") switch allows you to add switches to the command line of the underlying setup.exe process. You may provide any of the normal InstallShield switches here, including /r, /s, and /sms.
info_4=Thus, to automate the installation of a PFTW package named foo.exe, you would first perform one installation by hand to create the answer file:
info_5=foo.exe /a /r /f1c:\temp\foo.iss
info_6=Then, to install the package completely silently, you would run:
info_7=start /wait foo.exe /s /a /s /sms /f1c:\temp\foo.iss
info_8=The first /s is only needed for a completely silent installation. If you leave it off, the PFTW package will show you a status bar as it extracts the InstallShield tree to the temporary directory.

[WiseInstallMaster]
pre=
post=
info_lines=3
info_0=InstallMaster from Wise Solutions is a competitor to InstallShield. You can usually identify the installers it produces by running "strings" on the executable and grepping for "Wise". 
info_1=InstallMaster installers are supposed to recognize the /s switch to perform a silent installation. And in our experience, they generally do. But there is no way to set options, and the exit status is meaningless.
info_2=Note: This product has been rebranded the "Wise Installation System".

[InnoSetup]
pre=
post=/verysilent /norestart 
info_lines=4
info_0=Inno Setup is an open source installer. You can usually identify the installers it creates by running "strings" on the executable and grepping for "Inno".
info_1=The switches for Inno Setup are fully documented in the ISetup.hlp file in the Inno distribution. Here, is an html version. Thanks to Lawrence Mayer for it.
info_2=In our experience, the /silent switch is usually sufficient for a basic unattended installation. But to be completely sure, we recommend /sp- /silent /norestart.
info_3=Note that the /verysilent switch may reboot the machine without prompting, which is pretty much the worst of all possible worlds. So if you use /verysilent, be sure to use /norestart as well.

[NullsoftScriptableInstallSystem]
pre=
post=/S /NCRC /D={SpecifyInstallDirectory}
info_lines=4
info_0=The Nullsoft Scriptable Install System (NSIS) is another open source installation system. It was created by the WinAmp authors to distribute that application, but it is now a general-purpose system which anyone might use.
info_1=When an NSIS installer runs, it creates a little window which says verifying installer: N%, where N counts from 0 to 100. So you can recognize these installers by this behavior. (Actually the verification procedure is optional, but most installers have it enabled. As an alternative, you can run "strings" and grep for "NSIS").
info_2=NSIS installers recognize /S for silent installation, /NCRC to suppress the CRC (verification) step, and /D=dir to specify the "output directory", which is where the program will be installed. These options are case-sensitive, so be sure to type them in upper case.
info_3=Incidentally, all /S does is change the installer script's SilentInstall attribute from "normal" to "silent". What effect this has, exactly, depends on the person who wrote the script. If /S does not perform a silent install, consider submitting a bug report to the installer's creator.

[GhostInstaller]
pre=
post=-s 
info_lines=7
info_0=Ethalone's Ghost installer is just another commercial product, available in free and commercial editions. The free edition is nothing but the compiler, which takes XML files; the commercial edition is the compiler plus a graphical editor and wizard to create these XML files.
info_1=When a Ghost installer runs, it creates a little graphical window which says "Ghost installer wizard. Setup is preparing the Ghost Installer wizard..." together with a progress bar.
info_2=Ghost installers recognize -s (case-sensitive) for silent installation, but that works only if the person who created the installer defined a standard installation type (if there are more than one).
info_3=If you have trouble to get it silent you might try to guess internal variables and pass new values at the command line using -var:MyVar=value. Unfortunately, using "strings" will not help you guessing.
info_4=http://www.ethalone.com/cgi-bin/ib/ikonboard.cgi?act=ST;f=2;t=157
info_5=Other command line parameters are -r (repair), -c (add/remove), and -u (uninstall).
info_6=http://www.ethalone.com/cgi-bin/ib/ikonboard.cgi?act=ST;f=2;t=195

[MicrosoftHotfixesAndOlderPackages]
pre=
post=/passive /norestart
info_lines=6
info_0=Most Microsoft hotfixes respond to the /? switch, but they do not always tell you everything.
info_1=According to KB article 816915 and KB article 824687, Microsoft is moving towards standardized packaging and naming for hotfixes. But they are not done yet.
info_2=Modern hotfixes support /passive (formerly /u) for unattended installation, /norestart (formerly /z) to suppress the automatic reboot, and /n to skip backing up files needed for uninstalling the hotfix.
info_3=Some hotfixes use an old Microsoft packaging technology called "IExpress", whose switches are more-or-less documented in KB article 197147 and an old USENET post. These installers first extract some stuff to a temporary folder and then run a command from inside that folder. They support the /t:path switch to specify the temporary folder name and the /c:command switch to specify the command to run. Specifying just /c suppresses running the command at all, so you can use /c /t:path to extract the hotfix just to look at it.
info_4=These packages support the /q switch for quiet operation, except sometimes you have to use /q:a instead. They also support the /r:n switch to suppress the reboot. Sometimes these do not work and you have to fiddle with the /c:command switch; see the second "NOTE" in KB article 317244 for an example.
info_5=Leave it to Microsoft to make systems administration an experimental science.

[AutoIt]
pre=
post=
info_lines=8
info_0=AutoIt is a free tool which can simulate key presses and mouse clicks, following a script customarily named with a .aut or a .au3 extension. Most installers have a sufficiently simple and consistent interface that a very short AutoIt script suffices to automate their installation.
info_1=The AutoIt distribution includes very good documentation. The Unattended distribution includes both versions 2 (AutoIt.exe) and 3 (AutoIt3.exe). These versions differ in their script formats. Currently, all scripts that are shipped with Unattended are written for version 2, but we plan to switch to version 3 in the future and advise to create new scripts only in version 3.
info_2=AutoIt scripts do have drawbacks.
info_3=First, you must be careful when upgrading to new releases of an application, since the installer's UI may have changed.
info_4=More worryingly, AutoIt scripts are theoretically unreliable because they do not let you determine when a sub-process has exited. You can tell when AutoIt itself exits, but that is not the same thing at all. For example, an installer's last window might disappear while the installer was still working. Your master script, waiting only for the AutoIt executable, would then proceed, starting another installation or rebooting the machine.
info_5=AutoIt provides Run and RunWait primitives, but it does not provide a way to wait for the termination of an application which was invoked by Run. If it did, this race condition could be avoided.
info_6=In practice, it does not matter much, because most installers do finish their work before destroying their last window. Just make sure your .aut script uses WinWaitClose to wait for that last window to vanish.
info_7=You should make sure that your script contains a [ADLIB] section to catch surprising reboot requests.

[7zip]
pre=
post=
info_lines=0
info_0=

[info-zip]
pre=
post=
info_lines=1
info_0=http://downloads.sourceforge.net/gnuwin32/zip-3.0-setup.exe

[Compress-Archive]
pre=
post=
info_lines=10
info_0=Microsoft PowerShell Archiver(zip)
info_1=Example:Compress-Archive -LiteralPath C:\Reference\Draftdoc.docx, C:\Reference\Images\diagram2.vsd -CompressionLevel Optimal -DestinationPath C:\Archives\Draft.Zip
info_2=Compress-Archive
info_3=-Path String[list]
info_4=-DestinationPath String
info_5=-CompressionLevel String
info_6=-Confirm
info_7=-Force
info_8=-WhatIf
info_9=CommonParameters

[Expand-Archive]
pre=
post=
info_lines=9
info_0=Microsoft PowerShell Unzip
info_1=Example:Expand-Archive -Path Draft.Zip -DestinationPath C:\Reference
info_2=Expand-Archive
info_3=-Path String
info_4=-DestinationPath String
info_5=-Confirm
info_6=-Force
info_7=-WhatIf
info_8=CommonParameters

[MicrosoftCab]
pre=
post=
info_lines=0
info_0=

